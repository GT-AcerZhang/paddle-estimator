# Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from atarashi.service import interface_pb2 as atarashi_dot_service_dot_interface__pb2


class InferenceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.Infer = channel.unary_unary(
            '/interface.Inference/Infer',
            request_serializer=atarashi_dot_service_dot_interface__pb2.Slots.
            SerializeToString,
            response_deserializer=atarashi_dot_service_dot_interface__pb2.
            Slots.FromString, )


class InferenceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def Infer(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Infer': grpc.unary_unary_rpc_method_handler(
            servicer.Infer,
            request_deserializer=atarashi_dot_service_dot_interface__pb2.Slots.
            FromString,
            response_serializer=atarashi_dot_service_dot_interface__pb2.Slots.
            SerializeToString, ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'interface.Inference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
